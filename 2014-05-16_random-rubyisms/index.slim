- require "#{File.dirname(__FILE__)}/lib/slim_extensions"

doctype html
html
  head
    meta charset="utf-8"
    meta content="Miguel Palhas" name="author"
    meta content="yes" name="apple-mobile-web-app-capable"
    meta content="black-translucent" name="apple-mobile-web-app-status-bar-style"
    meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport"
    link href="css/reveal.min.css" rel="stylesheet"

    /! If the query includes 'print-pdf', use the PDF print sheet
    javascript:
      document.write( '' );
    /![if lt IE 9]
      | <script src="lib/js/html5shiv.js"></script>

    title Javascript (Best) Pratices
    meta content="Random (and probably useless) Rubyisms" name="description"

    link href="css/2014-02-28_javascript_best_practices.css" rel="stylesheet"
    /! For syntax highlighting
    link href="lib/css/tomorrow.css" rel="stylesheet"

  body
    .reveal
      .slides
        section
          h1 Random (and probably useless) Rubyisms

        section
          h1 Miguel Palhas
          h2 @naps62
          img src="" alt="[gb logo]"

        section
          h1 Disclaimer
          ol
            li Some of these might really be useless
            li There are probably better solutions
            li They're still interesing, so what the hell...

        section
          h1.mono attr_accessor

          pre: code.ruby |
            class X
              def attr_reader :something
            end

            class Y
              def something; @something; end
            end


        section
          h1
            | Inline
            span.mono recue

          pre.stretch: code.ruby |
            user = { first_name: 'Professor' }
            user[:last_name].underscore                   # NoMethodError for nil:NilClass
            user[:last_name].underscore rescue "CHIBANGA" # falls back to "CHIBANGA"


        section
          h1.mono Retry

          p
            | calls the 
            span.mono (begin..rescue)
            | block once again

          pre: code.ruby |
            def insist(max_attempts: 3, &block)
              begin
                attempts = 0
                yield
              rescue SomeException => e
                attempts += 1
                retry if attempts < max_attempts
              end
            end

        section
          h1 Lambdas quack like Hashes

          pre: code.ruby |
            fibs = -> x { (x <= 1) ? 1 : fibs[x-1] + fibs[x-2] }

            fibs.call(20)

          p But also:
          pre: code.ruby |
            fibs[20]


        section
          h1 Faster RegEx extraction

          pre: code.ruby
            str = "GB is not Great Britain"
            
            # the usual way
            match_results = str.match /(GB)/
            match_results[1]
            => "GB"

          p But also:
          pre: code.ruby |
            str[/(GB)/, 1]

       section
         h1 Array or single element?

         pre: code.ruby
           class Post < ActiveRecord::Base; end

           result  = Post.find(1)
           => #<Post:...>

           results = Post.find(1, 2)
           => [#<Post:...>, #<Post:...>]

       section
         h1 What if we don't know?

         pre: code.ruby
           results = Post.find(*ids)

           [*result].map do |post|
           end

        section
          h1 Unary operators
        
          p +, -, ! and ~ can be overriden

        section
          pre: code.ruby |
            class Counter
              def initialize
                @value = 0
              end

              def +@
                @value += 1
              end

              def -@
                @value -= 1
              end

              def !
                @value = 0
              end

              def ~
                @value
              end
            end

        section
          h1 Method Madness

        section
          pre.fragment: code.ruby def m1(a, b=1)        # correct
          pre.fragment: code.ruby def m2(a=1, b)        # correct (most languages only support optional args at the end
          pre.fragment: code.ruby def m3(a, b=2, c)     # correct
          pre.fragment: code.ruby def m4(a=1, b, c=3)   # wrong (optional args must be sequential)
          pre.fragment: code.ruby def m5(a, b=2, *args) # correct
          pre.fragment: code.ruby def m6(a=1, b, *args) # wrong

        section
          h1 Method Madness pt. 2

          pre: code.ruby |
            def m7(*args, c)      # correct

            def tail(*args, last)
              last
            end

        section
          h1 Modules

          pre: code.ruby |
            class MyClass
            end

          img src="modules_1.svg"


        section
          h1 Modules

          pre: code.ruby |
            module MyModule; end

            class MyClass
              include MyModule
            end

          img src="modules_2.svg"

        section
          h1 Modules

          pre: code.ruby |
            module MyModule; end
            module AnotherModule; end

            class MyClass
              include MyModule
              include AnotherModule
            end

          img src="modules_3.svg"


        section
          h1 Modules

          pre: code.ruby |
            module Prepended; end

            class MyClass
              prepend Prepended
            end

          img src="modules_3.svg"


        section
          h1 Lexical Scope

          pre: code.ruby |
            def m; end

          p defined in the global scope (actually an instance of Object)


        section
          h1 Lexical Scope

          pre: code.ruby |
            def Array.m; end

          p defined in the scope of the Array class
          p class method of Array


        section
          h1 Lexical Scope

          pre: code.ruby |
            array = Array.new
            def array.m; end

          p defined in the scope this single instance
          p instance method of array, not shared with other instances

        section
          pre: code.ruby |
            class << 


        section
          h1 Hashes

    script src="lib/js/head.min.js"
    script src="js/reveal.min.js"
    javascript:
      Reveal.initialize({
        width: 800,
        height: 600,
        controls: true,
        progress: true,
        history: true,
        center: true,

        theme: 'solarized', // available themes are in /css/theme
        transition: Reveal.getQueryHash().transition || 'fade', // default/cube/page/concave/zoom/linear/fade/none

        dependencies: [
          { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
          { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
          { src: 'plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
          { src: 'plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }
          /* /!/ { src: 'plugin/search/search.js', async: true, condition: function() { return !!document.body.classList; } } */
          /* /!/ { src: 'plugin/remotes/remotes.js', async: true, condition: function() { return !!document.body.classList; } } */
        ]
      });
